[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Data analyze blog"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data Analyze blog",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n  \n\n\n\n\npandas\n\n\nData Mining basic02\n\n\n\n\nPython\n\n\ndata mining\n\n\n \n\n\n\n\nMar 21, 2023\n\n\nWonjun Choi\n\n\n\n\n\n\n  \n\n\n\n\nR basic\n\n\nAdvanced R basic\n\n\n\n\nR\n\n\nadvanced R\n\n\n \n\n\n\n\nMar 20, 2023\n\n\nWonjun Choi\n\n\n\n\n\n\n  \n\n\n\n\nTest Post\n\n\n\n\n\n\n\ncode\n\n\n \n\n\n\n\nMar 14, 2023\n\n\nWonjun Choi\n\n\n\n\n\n\n  \n\n\n\n\nManaging data with tidyverse\n\n\nOpen Data Analysis ch02\n\n\n\n\nopen data analysis\n\n\nR\n\n\n \n\n\n\n\nMar 10, 2023\n\n\nWonjun Choi\n\n\n\n\n\n\n  \n\n\n\n\nnumpy\n\n\nData Mining basic01\n\n\n\n\nPython\n\n\ndata mining\n\n\n \n\n\n\n\nMar 7, 2023\n\n\nWonjun Choi\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/Managing_data_with_tidyverse/index.html",
    "href": "posts/Managing_data_with_tidyverse/index.html",
    "title": "Managing data with tidyverse",
    "section": "",
    "text": "RStudio가 개발, 관리하는 패키지\n공식 문서가 매우 잘 되어 있음: https://www.tidyverse.org/\n사용자층이 두터워 영어로 검색하면 많은 질답을 찾을 수 있음\n6개의 핵심 패키지 포함 23가지 패키지로 이루어진 메타 패키지\n\n\n#install.packages(\"tidyverse\")\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.0     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.1     ✔ tibble    3.1.8\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\n\n\n코드가 길어지면 이해하기 어려운 한계가 존재\n\nrnorm 평균이 10이고 표준편차가 1인 정규분포에서 데이터 10000개 생성\nsample 데이터 10000개 중 100개 샘플링\nlog 로그\ndiff 차분\nplot 그래프화\n\n\n\nplot(diff(log(sample(rnorm(10000,  mean = 10, sd = 1), \n                     size = 100, \n                     replace = FALSE))), \n     col = \"red\", \n     type = \"l\")"
  },
  {
    "objectID": "posts/Managing_data_with_tidyverse/index.html#파이프-연산자를-통한-코드의-직관화",
    "href": "posts/Managing_data_with_tidyverse/index.html#파이프-연산자를-통한-코드의-직관화",
    "title": "Managing data with tidyverse",
    "section": "2. 파이프 연산자(%>%)를 통한 코드의 직관화",
    "text": "2. 파이프 연산자(%>%)를 통한 코드의 직관화\n\nCtrl + Shift + M\n순차적 흐름으로 코드를 이해할 수 있음\n중간 변수들을 계속해서 Object로 할당할 필요가 없음\n\n\nrnorm(10000, mean = 10, sd = 1) %>%\n  sample(size = 100, replace = FALSE) %>%\n  log() %>%\n  diff() %>%\n  plot(col = \"red\", type = \"l\")\n\n\n\n\n\nFlight 데이터의 파이프 연산자 예시\n\n사용할 데이터셋은 뉴욕시에서 2013년에 출발한 336,776개의 모든 항공편이 포함된 데이터 (nycflights13 패키지의 flights 데이터셋)\n\n\n# install.packages(\"nycflights13\")\nlibrary(nycflights13)\n\nnrow(flights) # 행의 수\n\n[1] 336776\n\nhead(flights)\n\n# A tibble: 6 × 19\n   year month   day dep_time sched_dep…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier\n  <int> <int> <int>    <int>       <int>   <dbl>   <int>   <int>   <dbl> <chr>  \n1  2013     1     1      517         515       2     830     819      11 UA     \n2  2013     1     1      533         529       4     850     830      20 UA     \n3  2013     1     1      542         540       2     923     850      33 AA     \n4  2013     1     1      544         545      -1    1004    1022     -18 B6     \n5  2013     1     1      554         600      -6     812     837     -25 DL     \n6  2013     1     1      554         558      -4     740     728      12 UA     \n# … with 9 more variables: flight <int>, tailnum <chr>, origin <chr>,\n#   dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>, minute <dbl>,\n#   time_hour <dttm>, and abbreviated variable names ¹​sched_dep_time,\n#   ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay\n\n\n\nflights data를 선택 후, group_by 한 후, summarise를 수행\n각 function의 기능이 무엇인지 몰라도 대략적인 흐름 파악 가능\n\n\nflights %>% \n  group_by(year, month, day) %>% \n  summarise(delay = mean(dep_delay), na.rm = TRUE)\n\n`summarise()` has grouped output by 'year', 'month'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 365 × 5\n# Groups:   year, month [12]\n    year month   day delay na.rm\n   <int> <int> <int> <dbl> <lgl>\n 1  2013     1     1    NA TRUE \n 2  2013     1     2    NA TRUE \n 3  2013     1     3    NA TRUE \n 4  2013     1     4    NA TRUE \n 5  2013     1     5    NA TRUE \n 6  2013     1     6    NA TRUE \n 7  2013     1     7    NA TRUE \n 8  2013     1     8    NA TRUE \n 9  2013     1     9    NA TRUE \n10  2013     1    10    NA TRUE \n# … with 355 more rows\n\nmean_delay_by_day <- flights %>% \n  group_by(year, month, day) %>% # 연도, 월, 일자에 대해서 group\n  summarise(delay = mean(dep_delay), na.rm = TRUE) %>% \n  arrange(desc(delay))\n\n`summarise()` has grouped output by 'year', 'month'. You can override using the\n`.groups` argument."
  },
  {
    "objectID": "posts/Managing_data_with_tidyverse/index.html#dplyr-패키지에-포함된-유용한-명령어들",
    "href": "posts/Managing_data_with_tidyverse/index.html#dplyr-패키지에-포함된-유용한-명령어들",
    "title": "Managing data with tidyverse",
    "section": "4. dplyr 패키지에 포함된 유용한 명령어들",
    "text": "4. dplyr 패키지에 포함된 유용한 명령어들\n\n4-1 select() : 열 방향 선택\n\n데이터에서 특정 컬럼을 선택하고 싶을 때 사용\n선언된 순서대로 컬럼을 정렬\n\n\nflights %>% select(year, month, day)\n\n# A tibble: 336,776 × 3\n    year month   day\n   <int> <int> <int>\n 1  2013     1     1\n 2  2013     1     1\n 3  2013     1     1\n 4  2013     1     1\n 5  2013     1     1\n 6  2013     1     1\n 7  2013     1     1\n 8  2013     1     1\n 9  2013     1     1\n10  2013     1     1\n# … with 336,766 more rows\n\n# 컬럼에 띄어쓰기가 존재할 때\nflights$`not use` <- 0\n\n# 컬럼 이름에 되도록 띄어쓰기 사용 X\nflights %>%  select(`not use`)\n\n# A tibble: 336,776 × 1\n   `not use`\n       <dbl>\n 1         0\n 2         0\n 3         0\n 4         0\n 5         0\n 6         0\n 7         0\n 8         0\n 9         0\n10         0\n# … with 336,766 more rows\n\n# 해당 컬럼 삭제\nflights$`not use` <- NULL\n\n\n\n4-2 mutate() : 새로운 컬럼을 만들거나 계산하고 싶을 때\n\n편의성을 위해 일부 데이터만 추출\n\n\nflight_sample <- flights %>% select(year:day, ends_with(\"delay\"), distance, air_time)\nflight_sample\n\n# A tibble: 336,776 × 7\n    year month   day dep_delay arr_delay distance air_time\n   <int> <int> <int>     <dbl>     <dbl>    <dbl>    <dbl>\n 1  2013     1     1         2        11     1400      227\n 2  2013     1     1         4        20     1416      227\n 3  2013     1     1         2        33     1089      160\n 4  2013     1     1        -1       -18     1576      183\n 5  2013     1     1        -6       -25      762      116\n 6  2013     1     1        -4        12      719      150\n 7  2013     1     1        -5        19     1065      158\n 8  2013     1     1        -3       -14      229       53\n 9  2013     1     1        -3        -8      944      140\n10  2013     1     1        -2         8      733      138\n# … with 336,766 more rows\n\n\n\n각 컬럼간의 계산으로 새로운 열(Column)을 만듬\n\n\nflight_sample$net_delay <-\n  flight_sample$arr_delay - flight_sample$dep_delay\n\nflight_sample$speed <- flight_sample$distance/flight_sample$air_time*60\n\n# mutate 사용하여 구현\nflight_sample %>% mutate(net_delay = arr_delay - dep_delay,\n                         speed = distance/air_time*60)\n\n# A tibble: 336,776 × 9\n    year month   day dep_delay arr_delay distance air_time net_delay speed\n   <int> <int> <int>     <dbl>     <dbl>    <dbl>    <dbl>     <dbl> <dbl>\n 1  2013     1     1         2        11     1400      227         9  370.\n 2  2013     1     1         4        20     1416      227        16  374.\n 3  2013     1     1         2        33     1089      160        31  408.\n 4  2013     1     1        -1       -18     1576      183       -17  517.\n 5  2013     1     1        -6       -25      762      116       -19  394.\n 6  2013     1     1        -4        12      719      150        16  288.\n 7  2013     1     1        -5        19     1065      158        24  404.\n 8  2013     1     1        -3       -14      229       53       -11  259.\n 9  2013     1     1        -3        -8      944      140        -5  405.\n10  2013     1     1        -2         8      733      138        10  319.\n# … with 336,766 more rows\n\n\n\n\n4-3 filter() : 행방향으로 조건을 설정\n\n데이터 중에 조건에 해당하는 일부 데이터만 필터해서 사용\n논리연산자와 결합하여 많이 사용\n논리연산자에 대한 자세한 내용은 링크 참조\n\n\na <- c(10, 20, 30, 40, 50)\nb <- 30\n\n# 논리 연산자\na == b\n\n[1] FALSE FALSE  TRUE FALSE FALSE\n\na > b\n\n[1] FALSE FALSE FALSE  TRUE  TRUE\n\n# 숫자를 사용한 인덱싱\na[1]\n\n[1] 10\n\na[3]\n\n[1] 30\n\na[c(1, 3)]\n\n[1] 10 30\n\n# 논리연산자를 사용한 인덱싱\na[a>b]\n\n[1] 40 50\n\na[c(4, 5)]\n\n[1] 40 50\n\n\n\n\n\n연산자\n설명\n\n\n\n\na < b\na가 b보다 작다\n\n\na <= b\na가 b보다 작거나 같다\n\n\na == b\na와 b가 같다\n\n\na != b\na와 b가 같지 않다\n\n\n!x\nx가 아니다\n\n\nx | y\nx이거나 y이다\n\n\nx & y\nx이고 y이다\n\n\nisTRUE(x)\nx가 TRUE이다\n\n\n\n\nflights %>% filter(month==1) # 1월 데이터만 추출\n\n# A tibble: 27,004 × 19\n    year month   day dep_time sched_de…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier\n   <int> <int> <int>    <int>      <int>   <dbl>   <int>   <int>   <dbl> <chr>  \n 1  2013     1     1      517        515       2     830     819      11 UA     \n 2  2013     1     1      533        529       4     850     830      20 UA     \n 3  2013     1     1      542        540       2     923     850      33 AA     \n 4  2013     1     1      544        545      -1    1004    1022     -18 B6     \n 5  2013     1     1      554        600      -6     812     837     -25 DL     \n 6  2013     1     1      554        558      -4     740     728      12 UA     \n 7  2013     1     1      555        600      -5     913     854      19 B6     \n 8  2013     1     1      557        600      -3     709     723     -14 EV     \n 9  2013     1     1      557        600      -3     838     846      -8 B6     \n10  2013     1     1      558        600      -2     753     745       8 AA     \n# … with 26,994 more rows, 9 more variables: flight <int>, tailnum <chr>,\n#   origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, time_hour <dttm>, and abbreviated variable names\n#   ¹​sched_dep_time, ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay\n\nflights %>% filter(month==12, day == 1) # 12월 1일 데이터만 추출\n\n# A tibble: 987 × 19\n    year month   day dep_time sched_de…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier\n   <int> <int> <int>    <int>      <int>   <dbl>   <int>   <int>   <dbl> <chr>  \n 1  2013    12     1       13       2359      14     446     445       1 B6     \n 2  2013    12     1       17       2359      18     443     437       6 B6     \n 3  2013    12     1      453        500      -7     636     651     -15 US     \n 4  2013    12     1      520        515       5     749     808     -19 UA     \n 5  2013    12     1      536        540      -4     845     850      -5 AA     \n 6  2013    12     1      540        550     -10    1005    1027     -22 B6     \n 7  2013    12     1      541        545      -4     734     755     -21 EV     \n 8  2013    12     1      546        545       1     826     835      -9 UA     \n 9  2013    12     1      549        600     -11     648     659     -11 US     \n10  2013    12     1      550        600     -10     825     854     -29 B6     \n# … with 977 more rows, 9 more variables: flight <int>, tailnum <chr>,\n#   origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, time_hour <dttm>, and abbreviated variable names\n#   ¹​sched_dep_time, ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay\n\n\n\n\n4-4 bind_rows()\n\n두 데이터를 행방향으로 묶음\n데이터를 아래로 붙임\n\nfilter()를 사용한 subset 추출\n\njan <- flights %>% filter(month == 1)\nfeb <- flights %>% filter(month == 2)\njanfeb <- bind_rows(jan, feb) # 1번 방법\njanfeb <- jan %>% bind_rows(feb) # 2번 방법\nflights %>% filter(month %in% c(1,2))\n\n# A tibble: 51,955 × 19\n    year month   day dep_time sched_de…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier\n   <int> <int> <int>    <int>      <int>   <dbl>   <int>   <int>   <dbl> <chr>  \n 1  2013     1     1      517        515       2     830     819      11 UA     \n 2  2013     1     1      533        529       4     850     830      20 UA     \n 3  2013     1     1      542        540       2     923     850      33 AA     \n 4  2013     1     1      544        545      -1    1004    1022     -18 B6     \n 5  2013     1     1      554        600      -6     812     837     -25 DL     \n 6  2013     1     1      554        558      -4     740     728      12 UA     \n 7  2013     1     1      555        600      -5     913     854      19 B6     \n 8  2013     1     1      557        600      -3     709     723     -14 EV     \n 9  2013     1     1      557        600      -3     838     846      -8 B6     \n10  2013     1     1      558        600      -2     753     745       8 AA     \n# … with 51,945 more rows, 9 more variables: flight <int>, tailnum <chr>,\n#   origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, time_hour <dttm>, and abbreviated variable names\n#   ¹​sched_dep_time, ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay\n\n\n\n\n4-5 arrange() : 데이터 정렬\n\n지정되는 컬럼 기준으로 오름차순 정렬\n\n\n# 오름차순 정렬\nflights %>% arrange(dep_delay)\n\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_de…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier\n   <int> <int> <int>    <int>      <int>   <dbl>   <int>   <int>   <dbl> <chr>  \n 1  2013    12     7     2040       2123     -43      40    2352      48 B6     \n 2  2013     2     3     2022       2055     -33    2240    2338     -58 DL     \n 3  2013    11    10     1408       1440     -32    1549    1559     -10 EV     \n 4  2013     1    11     1900       1930     -30    2233    2243     -10 DL     \n 5  2013     1    29     1703       1730     -27    1947    1957     -10 F9     \n 6  2013     8     9      729        755     -26    1002     955       7 MQ     \n 7  2013    10    23     1907       1932     -25    2143    2143       0 EV     \n 8  2013     3    30     2030       2055     -25    2213    2250     -37 MQ     \n 9  2013     3     2     1431       1455     -24    1601    1631     -30 9E     \n10  2013     5     5      934        958     -24    1225    1309     -44 B6     \n# … with 336,766 more rows, 9 more variables: flight <int>, tailnum <chr>,\n#   origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, time_hour <dttm>, and abbreviated variable names\n#   ¹​sched_dep_time, ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay\n\n# 내림차순 정렬\nflights %>% arrange(-dep_delay)\n\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_de…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier\n   <int> <int> <int>    <int>      <int>   <dbl>   <int>   <int>   <dbl> <chr>  \n 1  2013     1     9      641        900    1301    1242    1530    1272 HA     \n 2  2013     6    15     1432       1935    1137    1607    2120    1127 MQ     \n 3  2013     1    10     1121       1635    1126    1239    1810    1109 MQ     \n 4  2013     9    20     1139       1845    1014    1457    2210    1007 AA     \n 5  2013     7    22      845       1600    1005    1044    1815     989 MQ     \n 6  2013     4    10     1100       1900     960    1342    2211     931 DL     \n 7  2013     3    17     2321        810     911     135    1020     915 DL     \n 8  2013     6    27      959       1900     899    1236    2226     850 DL     \n 9  2013     7    22     2257        759     898     121    1026     895 DL     \n10  2013    12     5      756       1700     896    1058    2020     878 AA     \n# … with 336,766 more rows, 9 more variables: flight <int>, tailnum <chr>,\n#   origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, time_hour <dttm>, and abbreviated variable names\n#   ¹​sched_dep_time, ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay\n\n\n\n\n4-6 group_by() & summarise() : 그룹별로 계산을 수행\n\n그룹별로 통계치를 뽑거나 특정 계산을 수행하고 싶은 경우\n\n\n# Group을 하지 않았을 때\nflights %>% \n  summarise(mean_dep_delay = mean(dep_delay, na.rm = T),\n            count = n())\n\n# A tibble: 1 × 2\n  mean_dep_delay  count\n           <dbl>  <int>\n1           12.6 336776\n\nflights %>% \n  group_by(month) %>% \n  summarise(mean_dep_delay = mean(dep_delay, na.rm = T),\n            count = n())\n\n# A tibble: 12 × 3\n   month mean_dep_delay count\n   <int>          <dbl> <int>\n 1     1          10.0  27004\n 2     2          10.8  24951\n 3     3          13.2  28834\n 4     4          13.9  28330\n 5     5          13.0  28796\n 6     6          20.8  28243\n 7     7          21.7  29425\n 8     8          12.6  29327\n 9     9           6.72 27574\n10    10           6.24 28889\n11    11           5.44 27268\n12    12          16.6  28135\n\n# 월마다 가장 연착이 긴 시간을 뽑아보기\nflights %>% \n  group_by(month) %>% \n  summarise(count = n(),\n            mean_dep_delay = mean(dep_delay, na.rm = T),\n            max_dep_delay = max(dep_delay, na.rm = T))\n\n# A tibble: 12 × 4\n   month count mean_dep_delay max_dep_delay\n   <int> <int>          <dbl>         <dbl>\n 1     1 27004          10.0           1301\n 2     2 24951          10.8            853\n 3     3 28834          13.2            911\n 4     4 28330          13.9            960\n 5     5 28796          13.0            878\n 6     6 28243          20.8           1137\n 7     7 29425          21.7           1005\n 8     8 29327          12.6            520\n 9     9 27574           6.72          1014\n10    10 28889           6.24           702\n11    11 27268           5.44           798\n12    12 28135          16.6            896\n\n# 월마다 가장 연착이 많이된 비행기는 해당 월의 평균보다 몇배가 높나요?\na <- flights %>% \n  group_by(month) %>% \n  summarise(count = n(),\n            mean_dep_delay = mean(dep_delay, na.rm = T),\n            max_dep_delay = max(dep_delay, na.rm = T))\n            \na %>% mutate(max_dep_delay_ratio = max_dep_delay / mean_dep_delay)\n\n# A tibble: 12 × 5\n   month count mean_dep_delay max_dep_delay max_dep_delay_ratio\n   <int> <int>          <dbl>         <dbl>               <dbl>\n 1     1 27004          10.0           1301               130. \n 2     2 24951          10.8            853                78.9\n 3     3 28834          13.2            911                68.9\n 4     4 28330          13.9            960                68.9\n 5     5 28796          13.0            878                67.6\n 6     6 28243          20.8           1137                54.5\n 7     7 29425          21.7           1005                46.3\n 8     8 29327          12.6            520                41.2\n 9     9 27574           6.72          1014               151. \n10    10 28889           6.24           702               112. \n11    11 27268           5.44           798               147. \n12    12 28135          16.6            896                54.1\n\n\n\n\n4-7 left_join()\n\n# 특정 컬럼만 추출\nflight_sample <- flights %>% select(year:day, origin, carrier)\nflight_sample\n\n# A tibble: 336,776 × 5\n    year month   day origin carrier\n   <int> <int> <int> <chr>  <chr>  \n 1  2013     1     1 EWR    UA     \n 2  2013     1     1 LGA    UA     \n 3  2013     1     1 JFK    AA     \n 4  2013     1     1 JFK    B6     \n 5  2013     1     1 LGA    DL     \n 6  2013     1     1 EWR    UA     \n 7  2013     1     1 EWR    B6     \n 8  2013     1     1 LGA    EV     \n 9  2013     1     1 JFK    B6     \n10  2013     1     1 LGA    AA     \n# … with 336,766 more rows\n\n\n\n# 항공사 이름\nairlines\n\n# A tibble: 16 × 2\n   carrier name                       \n   <chr>   <chr>                      \n 1 9E      Endeavor Air Inc.          \n 2 AA      American Airlines Inc.     \n 3 AS      Alaska Airlines Inc.       \n 4 B6      JetBlue Airways            \n 5 DL      Delta Air Lines Inc.       \n 6 EV      ExpressJet Airlines Inc.   \n 7 F9      Frontier Airlines Inc.     \n 8 FL      AirTran Airways Corporation\n 9 HA      Hawaiian Airlines Inc.     \n10 MQ      Envoy Air                  \n11 OO      SkyWest Airlines Inc.      \n12 UA      United Air Lines Inc.      \n13 US      US Airways Inc.            \n14 VX      Virgin America             \n15 WN      Southwest Airlines Co.     \n16 YV      Mesa Airlines Inc.         \n\n\n\n두 데이터를 특정한 key value를 기준으로 좌우로 붙이고 싶을 때 left_join()을 사용\n\n\nflight_sample %>% left_join(airlines, by = \"carrier\")\n\n# A tibble: 336,776 × 6\n    year month   day origin carrier name                    \n   <int> <int> <int> <chr>  <chr>   <chr>                   \n 1  2013     1     1 EWR    UA      United Air Lines Inc.   \n 2  2013     1     1 LGA    UA      United Air Lines Inc.   \n 3  2013     1     1 JFK    AA      American Airlines Inc.  \n 4  2013     1     1 JFK    B6      JetBlue Airways         \n 5  2013     1     1 LGA    DL      Delta Air Lines Inc.    \n 6  2013     1     1 EWR    UA      United Air Lines Inc.   \n 7  2013     1     1 EWR    B6      JetBlue Airways         \n 8  2013     1     1 LGA    EV      ExpressJet Airlines Inc.\n 9  2013     1     1 JFK    B6      JetBlue Airways         \n10  2013     1     1 LGA    AA      American Airlines Inc.  \n# … with 336,766 more rows\n\n\n\nKey 값의 컬럼 이름이 다를 경우\n\n\ncolnames(airlines)[1] <- \"company_name\"\n\nflight_sample %>% left_join(airlines, by = c(\"carrier\" = \"company_name\"))\n\n# A tibble: 336,776 × 6\n    year month   day origin carrier name                    \n   <int> <int> <int> <chr>  <chr>   <chr>                   \n 1  2013     1     1 EWR    UA      United Air Lines Inc.   \n 2  2013     1     1 LGA    UA      United Air Lines Inc.   \n 3  2013     1     1 JFK    AA      American Airlines Inc.  \n 4  2013     1     1 JFK    B6      JetBlue Airways         \n 5  2013     1     1 LGA    DL      Delta Air Lines Inc.    \n 6  2013     1     1 EWR    UA      United Air Lines Inc.   \n 7  2013     1     1 EWR    B6      JetBlue Airways         \n 8  2013     1     1 LGA    EV      ExpressJet Airlines Inc.\n 9  2013     1     1 JFK    B6      JetBlue Airways         \n10  2013     1     1 LGA    AA      American Airlines Inc.  \n# … with 336,766 more rows"
  },
  {
    "objectID": "posts/test_post/index.html",
    "href": "posts/test_post/index.html",
    "title": "Test Post",
    "section": "",
    "text": "This is a post for test.\nmatplotlib을 활용한 scatter plot 예제\n\n%matplotlib inline\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# 데이터 생성\nx = np.random.rand(50)\ny = np.random.rand(50)\ncolors = np.random.rand(50)\nsizes = 1000 * np.random.rand(50)\n\n# scatter plot 그리기\nplt.scatter(x, y, c=colors, s=sizes, alpha=0.5)\n\n# 축 라벨 설정\nplt.xlabel('X label')\nplt.ylabel('Y label')\n\n# 그래프 타이틀 설정\nplt.title('Scatter plot example')\n\n# 그래프 출력\nplt.show()"
  }
]